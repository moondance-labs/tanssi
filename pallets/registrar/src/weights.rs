// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_registrar
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tomasz-XPS-15-9520`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_registrar
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_registrar.
pub trait WeightInfo {
	fn register(x: u32, y: u32, z: u32, ) -> Weight;
	fn deregister_immediate(x: u32, y: u32, ) -> Weight;
	fn deregister_scheduled(x: u32, y: u32, ) -> Weight;
	fn mark_valid_for_collating(y: u32, ) -> Weight;
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight;
	fn pause_container_chain(y: u32, ) -> Weight;
}

/// Weights for pallet_registrar using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Registrar::ParaGenesisData` (r:1 w:1)
	/// Proof: `Registrar::ParaGenesisData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegistrarDeposit` (r:0 w:1)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462 + y * (12 ±0)`
		//  Estimated: `3907 + y * (12 ±0) + z * (2 ±0)`
		// Minimum execution time: 40_514_000 picoseconds.
		Weight::from_parts(42_013_000, 3907)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(633, 0).saturating_mul(x.into()))
			// Standard Error: 2_526_167
			.saturating_add(Weight::from_parts(93_178_305, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(z.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegistrarDeposit` (r:1 w:1)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ServicesPayment::BlockProductionCredits` (r:0 w:1)
	/// Proof: `ServicesPayment::BlockProductionCredits` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Registrar::BootNodes` (r:0 w:1)
	/// Proof: `Registrar::BootNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::ParaGenesisData` (r:0 w:1)
	/// Proof: `Registrar::ParaGenesisData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AuthorNoting::LatestAuthor` (r:0 w:1)
	/// Proof: `AuthorNoting::LatestAuthor` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister_immediate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310 + y * (17 ±0)`
		//  Estimated: `3868 + y * (15 ±0)`
		// Minimum execution time: 47_354_000 picoseconds.
		Weight::from_parts(62_306_931, 3868)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(x.into()))
			// Standard Error: 11_297
			.saturating_add(Weight::from_parts(275_215, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 15).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:0)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:0)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::Paused` (r:1 w:0)
	/// Proof: `Registrar::Paused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingToRemove` (r:1 w:1)
	/// Proof: `Registrar::PendingToRemove` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister_scheduled(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `454 + y * (4 ±0)`
		//  Estimated: `1937 + y * (4 ±0)`
		// Minimum execution time: 25_398_000 picoseconds.
		Weight::from_parts(32_217_636, 1937)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(x.into()))
			// Standard Error: 8_573
			.saturating_add(Weight::from_parts(242_112, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:0)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegisteredParaIds` (r:1 w:0)
	/// Proof: `Registrar::RegisteredParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::Paused` (r:1 w:0)
	/// Proof: `Registrar::Paused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + y * (8 ±0)`
		//  Estimated: `1958 + y * (8 ±0)`
		// Minimum execution time: 27_650_000 picoseconds.
		Weight::from_parts(42_754_882, 1958)
			// Standard Error: 9_207
			.saturating_add(Weight::from_parts(276_708, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::RegistrarDeposit` (r:1 w:0)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::BootNodes` (r:0 w:1)
	/// Proof: `Registrar::BootNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `268`
		//  Estimated: `3733`
		// Minimum execution time: 13_676_000 picoseconds.
		Weight::from_parts(12_346_432, 3733)
			// Standard Error: 187
			.saturating_add(Weight::from_parts(10_544, 0).saturating_mul(x.into()))
			// Standard Error: 3_903
			.saturating_add(Weight::from_parts(310_487, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:1)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[1, 50]`.
	fn pause_container_chain(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468 + y * (8 ±0)`
		//  Estimated: `1949 + y * (8 ±0)`
		// Minimum execution time: 23_804_000 picoseconds.
		Weight::from_parts(37_160_176, 1949)
			// Standard Error: 7_922
			.saturating_add(Weight::from_parts(302_077, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Registrar::ParaGenesisData` (r:1 w:1)
	/// Proof: `Registrar::ParaGenesisData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegistrarDeposit` (r:0 w:1)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462 + y * (12 ±0)`
		//  Estimated: `3907 + y * (12 ±0) + z * (2 ±0)`
		// Minimum execution time: 40_514_000 picoseconds.
		Weight::from_parts(42_013_000, 3907)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(633, 0).saturating_mul(x.into()))
			// Standard Error: 2_526_167
			.saturating_add(Weight::from_parts(93_178_305, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 12).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(z.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegistrarDeposit` (r:1 w:1)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ServicesPayment::BlockProductionCredits` (r:0 w:1)
	/// Proof: `ServicesPayment::BlockProductionCredits` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Registrar::BootNodes` (r:0 w:1)
	/// Proof: `Registrar::BootNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::ParaGenesisData` (r:0 w:1)
	/// Proof: `Registrar::ParaGenesisData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AuthorNoting::LatestAuthor` (r:0 w:1)
	/// Proof: `AuthorNoting::LatestAuthor` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister_immediate(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310 + y * (17 ±0)`
		//  Estimated: `3868 + y * (15 ±0)`
		// Minimum execution time: 47_354_000 picoseconds.
		Weight::from_parts(62_306_931, 3868)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(x.into()))
			// Standard Error: 11_297
			.saturating_add(Weight::from_parts(275_215, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 15).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:0)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:0)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::Paused` (r:1 w:0)
	/// Proof: `Registrar::Paused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingToRemove` (r:1 w:1)
	/// Proof: `Registrar::PendingToRemove` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister_scheduled(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `454 + y * (4 ±0)`
		//  Estimated: `1937 + y * (4 ±0)`
		// Minimum execution time: 25_398_000 picoseconds.
		Weight::from_parts(32_217_636, 1937)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(2, 0).saturating_mul(x.into()))
			// Standard Error: 8_573
			.saturating_add(Weight::from_parts(242_112, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::PendingVerification` (r:1 w:1)
	/// Proof: `Registrar::PendingVerification` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:0)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::RegisteredParaIds` (r:1 w:0)
	/// Proof: `Registrar::RegisteredParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::Paused` (r:1 w:0)
	/// Proof: `Registrar::Paused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + y * (8 ±0)`
		//  Estimated: `1958 + y * (8 ±0)`
		// Minimum execution time: 27_650_000 picoseconds.
		Weight::from_parts(42_754_882, 1958)
			// Standard Error: 9_207
			.saturating_add(Weight::from_parts(276_708, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
	/// Storage: `Registrar::RegistrarDeposit` (r:1 w:0)
	/// Proof: `Registrar::RegistrarDeposit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::BootNodes` (r:0 w:1)
	/// Proof: `Registrar::BootNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `268`
		//  Estimated: `3733`
		// Minimum execution time: 13_676_000 picoseconds.
		Weight::from_parts(12_346_432, 3733)
			// Standard Error: 187
			.saturating_add(Weight::from_parts(10_544, 0).saturating_mul(x.into()))
			// Standard Error: 3_903
			.saturating_add(Weight::from_parts(310_487, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Registrar::PendingParaIds` (r:1 w:1)
	/// Proof: `Registrar::PendingParaIds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::PendingPaused` (r:1 w:1)
	/// Proof: `Registrar::PendingPaused` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[1, 50]`.
	fn pause_container_chain(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468 + y * (8 ±0)`
		//  Estimated: `1949 + y * (8 ±0)`
		// Minimum execution time: 23_804_000 picoseconds.
		Weight::from_parts(37_160_176, 1949)
			// Standard Error: 7_922
			.saturating_add(Weight::from_parts(302_077, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
}
