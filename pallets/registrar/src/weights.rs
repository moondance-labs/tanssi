// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_registrar
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `COV0768`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --steps=50
// --repeat=20
// --pallet=pallet_registrar
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./pallets/registrar/src/weights.rs
// --template=./benchmarking/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_registrar.
pub trait WeightInfo {
	fn register(x: u32, y: u32, z: u32, ) -> Weight;
	fn deregister(x: u32, y: u32, ) -> Weight;
	fn mark_valid_for_collating(y: u32, ) -> Weight;
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight;
	fn pause_container_chain(y: u32, ) -> Weight;
}

/// Weights for pallet_registrar using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar PendingParaIds (r:1 w:0)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:0 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337 + y * (4 ±0)`
		//  Estimated: `3593 + y * (4 ±0)`
		// Minimum execution time: 38_840_000 picoseconds.
		Weight::from_parts(39_469_000, 3593)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(523, 0).saturating_mul(x.into()))
			// Standard Error: 2_164_276
			.saturating_add(Weight::from_parts(75_137_843, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:1 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar BootNodes (r:0 w:1)
	/// Proof Skipped: Registrar BootNodes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531 + y * (17 ±0)`
		//  Estimated: `4103 + y * (15 ±0)`
		// Minimum execution time: 39_039_000 picoseconds.
		Weight::from_parts(23_847_869, 4103)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(x.into()))
			// Standard Error: 27_360
			.saturating_add(Weight::from_parts(586_232, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 15).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418 + y * (8 ±0)`
		//  Estimated: `1899 + y * (8 ±0)`
		// Minimum execution time: 17_420_000 picoseconds.
		Weight::from_parts(32_834_209, 1899)
			// Standard Error: 16_866
			.saturating_add(Weight::from_parts(391_115, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
	/// Storage: Registrar RegistrarDeposit (r:1 w:0)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar BootNodes (r:0 w:1)
	/// Proof Skipped: Registrar BootNodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228`
		//  Estimated: `3693`
		// Minimum execution time: 12_350_000 picoseconds.
		Weight::from_parts(11_539_538, 3693)
			// Standard Error: 74
			.saturating_add(Weight::from_parts(5_037, 0).saturating_mul(x.into()))
			// Standard Error: 1_556
			.saturating_add(Weight::from_parts(268_604, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `y` is `[1, 50]`.
	fn pause_container_chain(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `392 + y * (8 ±0)`
		//  Estimated: `1873 + y * (8 ±0)`
		// Minimum execution time: 18_720_000 picoseconds.
		Weight::from_parts(33_323_042, 1873)
			// Standard Error: 15_926
			.saturating_add(Weight::from_parts(395_729, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar PendingParaIds (r:1 w:0)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:0 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337 + y * (4 ±0)`
		//  Estimated: `3593 + y * (4 ±0)`
		// Minimum execution time: 38_840_000 picoseconds.
		Weight::from_parts(39_469_000, 3593)
			// Standard Error: 7
			.saturating_add(Weight::from_parts(523, 0).saturating_mul(x.into()))
			// Standard Error: 2_164_276
			.saturating_add(Weight::from_parts(75_137_843, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:1 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar BootNodes (r:0 w:1)
	/// Proof Skipped: Registrar BootNodes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531 + y * (17 ±0)`
		//  Estimated: `4103 + y * (15 ±0)`
		// Minimum execution time: 39_039_000 picoseconds.
		Weight::from_parts(23_847_869, 4103)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(x.into()))
			// Standard Error: 27_360
			.saturating_add(Weight::from_parts(586_232, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 15).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418 + y * (8 ±0)`
		//  Estimated: `1899 + y * (8 ±0)`
		// Minimum execution time: 17_420_000 picoseconds.
		Weight::from_parts(32_834_209, 1899)
			// Standard Error: 16_866
			.saturating_add(Weight::from_parts(391_115, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
	/// Storage: Registrar RegistrarDeposit (r:1 w:0)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar BootNodes (r:0 w:1)
	/// Proof Skipped: Registrar BootNodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228`
		//  Estimated: `3693`
		// Minimum execution time: 12_350_000 picoseconds.
		Weight::from_parts(11_539_538, 3693)
			// Standard Error: 74
			.saturating_add(Weight::from_parts(5_037, 0).saturating_mul(x.into()))
			// Standard Error: 1_556
			.saturating_add(Weight::from_parts(268_604, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `y` is `[1, 50]`.
	fn pause_container_chain(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `392 + y * (8 ±0)`
		//  Estimated: `1873 + y * (8 ±0)`
		// Minimum execution time: 18_720_000 picoseconds.
		Weight::from_parts(33_323_042, 1873)
			// Standard Error: 15_926
			.saturating_add(Weight::from_parts(395_729, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(y.into()))
	}
}
