// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_registrar
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tomasz-XPS-15-9520`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_registrar
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_registrar.
pub trait WeightInfo {
	fn register(x: u32, y: u32, z: u32, ) -> Weight;
	fn deregister(x: u32, y: u32, ) -> Weight;
	fn mark_valid_for_collating(x: u32, y: u32, ) -> Weight;
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight;
}

/// Weights for pallet_registrar using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar PendingParaIds (r:1 w:0)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:0 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229 + y * (4 ±0)`
		//  Estimated: `9148 + y * (20 ±0)`
		// Minimum execution time: 35_969_000 picoseconds.
		Weight::from_parts(38_492_000, 9148)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(623, 0).saturating_mul(x.into()))
			// Standard Error: 2_648_577
			.saturating_add(Weight::from_parts(86_127_562, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:1 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + y * (17 ±0)`
		//  Estimated: `16184 + y * (90 ±0)`
		// Minimum execution time: 36_923_000 picoseconds.
		Weight::from_parts(31_680_100, 16184)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(x.into()))
			// Standard Error: 11_614
			.saturating_add(Weight::from_parts(467_629, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 90).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339 + y * (4 ±0)`
		//  Estimated: `7284 + y * (16 ±0)`
		// Minimum execution time: 18_035_000 picoseconds.
		Weight::from_parts(21_852_028, 7284)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(x.into()))
			// Standard Error: 7_985
			.saturating_add(Weight::from_parts(347_949, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(y.into()))
	}
	/// Storage: Registrar Bootnodes (r:0 w:1)
	/// Proof Skipped: Registrar Bootnodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_074_000 picoseconds.
		Weight::from_parts(5_401_046, 0)
			// Standard Error: 1_406
			.saturating_add(Weight::from_parts(8_206, 0).saturating_mul(x.into()))
			// Standard Error: 29_334
			.saturating_add(Weight::from_parts(451_244, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar PendingParaIds (r:1 w:0)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:0 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	/// The range of component `z` is `[1, 10]`.
	fn register(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229 + y * (4 ±0)`
		//  Estimated: `9148 + y * (20 ±0)`
		// Minimum execution time: 35_969_000 picoseconds.
		Weight::from_parts(38_492_000, 9148)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(623, 0).saturating_mul(x.into()))
			// Standard Error: 2_648_577
			.saturating_add(Weight::from_parts(86_127_562, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 20).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegistrarDeposit (r:1 w:1)
	/// Proof Skipped: Registrar RegistrarDeposit (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Registrar ParaGenesisData (r:0 w:1)
	/// Proof Skipped: Registrar ParaGenesisData (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn deregister(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + y * (17 ±0)`
		//  Estimated: `16184 + y * (90 ±0)`
		// Minimum execution time: 36_923_000 picoseconds.
		Weight::from_parts(31_680_100, 16184)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(7, 0).saturating_mul(x.into()))
			// Standard Error: 11_614
			.saturating_add(Weight::from_parts(467_629, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 90).saturating_mul(y.into()))
	}
	/// Storage: Registrar PendingVerification (r:1 w:1)
	/// Proof Skipped: Registrar PendingVerification (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar PendingParaIds (r:1 w:1)
	/// Proof Skipped: Registrar PendingParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session CurrentIndex (r:1 w:0)
	/// Proof Skipped: Session CurrentIndex (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[5, 3000000]`.
	/// The range of component `y` is `[1, 50]`.
	fn mark_valid_for_collating(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `339 + y * (4 ±0)`
		//  Estimated: `7284 + y * (16 ±0)`
		// Minimum execution time: 18_035_000 picoseconds.
		Weight::from_parts(21_852_028, 7284)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(x.into()))
			// Standard Error: 7_985
			.saturating_add(Weight::from_parts(347_949, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(y.into()))
	}
	/// Storage: Registrar Bootnodes (r:0 w:1)
	/// Proof Skipped: Registrar Bootnodes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 200]`.
	/// The range of component `y` is `[1, 10]`.
	fn set_boot_nodes(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_074_000 picoseconds.
		Weight::from_parts(5_401_046, 0)
			// Standard Error: 1_406
			.saturating_add(Weight::from_parts(8_206, 0).saturating_mul(x.into()))
			// Standard Error: 29_334
			.saturating_add(Weight::from_parts(451_244, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
