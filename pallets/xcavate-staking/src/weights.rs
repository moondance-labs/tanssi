
//! Autogenerated weights for `pallet_xcavate_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `LAPTOP-DFFNONK6`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_xcavate_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/xcavate-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_xcavate_staking`.
pub trait WeightInfo {
	fn stake() -> Weight;
	fn unstake() -> Weight;
	fn withdraw_from_queue() -> Weight;
}

/// Weights for `pallet_xcavate_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Whitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `Whitelist::WhitelistedAccounts` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	/// Storage: `CommunityLoanPool::TotalLoanAmount` (r:1 w:0)
	/// Proof: `CommunityLoanPool::TotalLoanAmount` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::TotalStake` (r:1 w:0)
	/// Proof: `XcavateStaking::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::QueueCount` (r:1 w:1)
	/// Proof: `XcavateStaking::QueueCount` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::QueueLedger` (r:1 w:1)
	/// Proof: `XcavateStaking::QueueLedger` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::AmountLocked` (r:1 w:1)
	/// Proof: `XcavateStaking::AmountLocked` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::QueueStaking` (r:1 w:1)
	/// Proof: `XcavateStaking::QueueStaking` (`max_values`: Some(1), `max_size`: Some(40002), added: 40497, mode: `MaxEncodedLen`)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `565`
		//  Estimated: `3201489`
		// Minimum execution time: 58_833_000 picoseconds.
		Weight::from_parts(61_137_000, 0)
			.saturating_add(Weight::from_parts(0, 3201489))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Whitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `Whitelist::WhitelistedAccounts` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::Ledger` (r:1 w:1)
	/// Proof: `XcavateStaking::Ledger` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::AmountLocked` (r:1 w:1)
	/// Proof: `XcavateStaking::AmountLocked` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::TotalStake` (r:1 w:1)
	/// Proof: `XcavateStaking::TotalStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `717`
		//  Estimated: `3201489`
		// Minimum execution time: 56_801_000 picoseconds.
		Weight::from_parts(59_510_000, 0)
			.saturating_add(Weight::from_parts(0, 3201489))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Whitelist::WhitelistedAccounts` (r:1 w:0)
	/// Proof: `Whitelist::WhitelistedAccounts` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::QueueLedger` (r:1 w:1)
	/// Proof: `XcavateStaking::QueueLedger` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `XcavateStaking::AmountLocked` (r:1 w:1)
	/// Proof: `XcavateStaking::AmountLocked` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(849), added: 3324, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_from_queue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `701`
		//  Estimated: `3201489`
		// Minimum execution time: 51_192_000 picoseconds.
		Weight::from_parts(52_578_000, 0)
			.saturating_add(Weight::from_parts(0, 3201489))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}
