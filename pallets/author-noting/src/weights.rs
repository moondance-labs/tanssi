// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_author_noting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tomasz-XPS-15-9520`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_author_noting.
pub trait WeightInfo {
	fn set_latest_author_data(x: u32, ) -> Weight;
	fn set_author() -> Weight;
}

/// Weights for pallet_author_noting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: AuthorNoting DidSetContainerAuthorData (r:1 w:1)
	/// Proof: AuthorNoting DidSetContainerAuthorData (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: ParachainSystem ValidationData (r:1 w:0)
	/// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorAssignment CollatorContainerChain (r:1 w:0)
	/// Proof Skipped: CollatorAssignment CollatorContainerChain (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AuthorNoting LatestAuthor (r:0 w:100)
	/// Proof: AuthorNoting LatestAuthor (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn set_latest_author_data(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288 + x * (73 ±0)`
		//  Estimated: `6779 + x * (219 ±0)`
		// Minimum execution time: 9_968_000 picoseconds.
		Weight::from_parts(10_155_000, 6779)
			// Standard Error: 120_562
			.saturating_add(Weight::from_parts(18_682_456, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 219).saturating_mul(x.into()))
	}
	/// Storage: AuthorNoting LatestAuthor (r:0 w:1)
	/// Proof: AuthorNoting LatestAuthor (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn set_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_745_000 picoseconds.
		Weight::from_parts(6_929_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: AuthorNoting DidSetContainerAuthorData (r:1 w:1)
	/// Proof: AuthorNoting DidSetContainerAuthorData (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: ParachainSystem ValidationData (r:1 w:0)
	/// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Registrar RegisteredParaIds (r:1 w:0)
	/// Proof Skipped: Registrar RegisteredParaIds (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: CollatorAssignment CollatorContainerChain (r:1 w:0)
	/// Proof Skipped: CollatorAssignment CollatorContainerChain (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AuthorNoting LatestAuthor (r:0 w:100)
	/// Proof: AuthorNoting LatestAuthor (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 100]`.
	fn set_latest_author_data(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `288 + x * (73 ±0)`
		//  Estimated: `6779 + x * (219 ±0)`
		// Minimum execution time: 9_968_000 picoseconds.
		Weight::from_parts(10_155_000, 6779)
			// Standard Error: 120_562
			.saturating_add(Weight::from_parts(18_682_456, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 219).saturating_mul(x.into()))
	}
	/// Storage: AuthorNoting LatestAuthor (r:0 w:1)
	/// Proof: AuthorNoting LatestAuthor (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn set_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_745_000 picoseconds.
		Weight::from_parts(6_929_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
