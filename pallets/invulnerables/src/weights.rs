// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>

//! Autogenerated weights for `pallet_invulnerables`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `cov0706`, CPU: `AMD Ryzen 9 7950X 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/tanssi-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_invulnerables
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/invulnerables/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn set_invulnerables(_b: u32) -> Weight;
	fn add_invulnerable(_b: u32) -> Weight;
	fn remove_invulnerable(_b: u32) -> Weight;
	fn new_session(_b: u32) -> Weight;
	fn reward_invulnerable() -> Weight;
}

/// Weight functions for `pallet_invulnerables`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Invulnerables Invulnerables (r:0 w:1)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_690_000 picoseconds.
		Weight::from_parts(4_000_278, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 283
			.saturating_add(Weight::from_parts(56_720, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Invulnerables::Invulnerables` (r:1 w:1)
	/// Proof: `Invulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 99]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `548 + b * (36 ±0)`
		//  Estimated: `4687 + b * (37 ±0)`
		// Minimum execution time: 16_117_000 picoseconds.
		Weight::from_parts(18_327_160, 4687)
			// Standard Error: 1_293
			.saturating_add(Weight::from_parts(94_608, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(b.into()))
	}
	/// Storage: Invulnerables Invulnerables (r:1 w:1)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + b * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 6_579_000 picoseconds.
		Weight::from_parts(6_971_607, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 194
			.saturating_add(Weight::from_parts(16_948, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Invulnerables Invulnerables (r:1 w:0)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 100]`.
	fn new_session(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + r * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 5_890_000 picoseconds.
		Weight::from_parts(6_573_828, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 320
			.saturating_add(Weight::from_parts(23_673, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	/// Storage: `Invulnerables::Invulnerables` (r:1 w:0)
        /// Proof: `Invulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
        /// Storage: `System::Account` (r:1 w:1)
        /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
        /// The range of component `b` is `[1, 100]`.
        fn reward_invulnerable() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `218 + b * (33 ±0)`
			//  Estimated: `4687`
			// Minimum execution time: 51_037_000 picoseconds.
			Weight::from_parts(68_315_971, 4687)
					.saturating_add(T::DbWeight::get().reads(2_u64))
					.saturating_add(T::DbWeight::get().writes(1_u64))
	}

}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Invulnerables Invulnerables (r:0 w:1)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_690_000 picoseconds.
		Weight::from_parts(4_000_278, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 283
			.saturating_add(Weight::from_parts(56_720, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Invulnerables::Invulnerables` (r:1 w:1)
	/// Proof: `Invulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 99]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `548 + b * (36 ±0)`
		//  Estimated: `4687 + b * (37 ±0)`
		// Minimum execution time: 16_117_000 picoseconds.
		Weight::from_parts(18_327_160, 4687)
			// Standard Error: 1_293
			.saturating_add(Weight::from_parts(94_608, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(b.into()))
	}
	/// Storage: Invulnerables Invulnerables (r:1 w:1)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + b * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 6_579_000 picoseconds.
		Weight::from_parts(6_971_607, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 194
			.saturating_add(Weight::from_parts(16_948, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

		/// Storage: Invulnerables Invulnerables (r:1 w:0)
	/// Proof: Invulnerables Invulnerables (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: System BlockWeight (r:1 w:1)
	/// Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 100]`.
	fn new_session(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `70 + r * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 5_890_000 picoseconds.
		Weight::from_parts(6_573_828, 0)
			.saturating_add(Weight::from_parts(0, 4687))
			// Standard Error: 320
			.saturating_add(Weight::from_parts(23_673, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	/// Storage: `Invulnerables::Invulnerables` (r:1 w:0)
        /// Proof: `Invulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
        /// Storage: `System::Account` (r:1 w:1)
        /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
        /// The range of component `b` is `[1, 100]`.
        fn reward_invulnerable() -> Weight {
			// Proof Size summary in bytes:
			//  Measured:  `218 + b * (33 ±0)`
			//  Estimated: `4687`
			// Minimum execution time: 51_037_000 picoseconds.
			Weight::from_parts(68_315_971, 4687)
					.saturating_add(RocksDbWeight::get().reads(2_u64))
					.saturating_add(RocksDbWeight::get().writes(1_u64))
	}


}
