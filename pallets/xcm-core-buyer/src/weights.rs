// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_xcm_core_buyer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `tomasz-XPS-15-9520`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_xcm_core_buyer
// --extrinsic
// *
// --chain=dev
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// tmp/pallet_xcm_core_buyer.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xcm_core_buyer.
pub trait WeightInfo {
	fn force_buy_core(x: u32, ) -> Weight;
	fn set_relay_xcm_weight_config() -> Weight;
	fn set_relay_chain() -> Weight;
}

/// Weights for pallet_xcm_core_buyer using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CollatorAssignment::CollatorContainerChain` (r:1 w:0)
	/// Proof: `CollatorAssignment::CollatorContainerChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::InFlightOrders` (r:1 w:1)
	/// Proof: `XcmCoreBuyer::InFlightOrders` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::ParathreadParams` (r:1 w:0)
	/// Proof: `Registrar::ParathreadParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::RelayXcmWeightConfig` (r:1 w:0)
	/// Proof: `XcmCoreBuyer::RelayXcmWeightConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::RelayChain` (r:1 w:0)
	/// Proof: `XcmCoreBuyer::RelayChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::VersionDiscoveryQueue` (r:1 w:1)
	/// Proof: `PolkadotXcm::VersionDiscoveryQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SafeXcmVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SafeXcmVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	/// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	/// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 99]`.
	fn force_buy_core(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `662 + x * (4 ±0)`
		//  Estimated: `4127 + x * (4 ±0)`
		// Minimum execution time: 28_172_000 picoseconds.
		Weight::from_parts(32_053_217, 4127)
			// Standard Error: 1_129
			.saturating_add(Weight::from_parts(27_235, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(x.into()))
	}
	/// Storage: `XcmCoreBuyer::RelayXcmWeightConfig` (r:0 w:1)
	/// Proof: `XcmCoreBuyer::RelayXcmWeightConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relay_xcm_weight_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_714_000 picoseconds.
		Weight::from_parts(1_805_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `XcmCoreBuyer::RelayChain` (r:0 w:1)
	/// Proof: `XcmCoreBuyer::RelayChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relay_chain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(1_787_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `CollatorAssignment::CollatorContainerChain` (r:1 w:0)
	/// Proof: `CollatorAssignment::CollatorContainerChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::InFlightOrders` (r:1 w:1)
	/// Proof: `XcmCoreBuyer::InFlightOrders` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registrar::ParathreadParams` (r:1 w:0)
	/// Proof: `Registrar::ParathreadParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::RelayXcmWeightConfig` (r:1 w:0)
	/// Proof: `XcmCoreBuyer::RelayXcmWeightConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `XcmCoreBuyer::RelayChain` (r:1 w:0)
	/// Proof: `XcmCoreBuyer::RelayChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::VersionDiscoveryQueue` (r:1 w:1)
	/// Proof: `PolkadotXcm::VersionDiscoveryQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SafeXcmVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SafeXcmVersion` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	/// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	/// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 99]`.
	fn force_buy_core(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `662 + x * (4 ±0)`
		//  Estimated: `4127 + x * (4 ±0)`
		// Minimum execution time: 28_172_000 picoseconds.
		Weight::from_parts(32_053_217, 4127)
			// Standard Error: 1_129
			.saturating_add(Weight::from_parts(27_235, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(x.into()))
	}
	/// Storage: `XcmCoreBuyer::RelayXcmWeightConfig` (r:0 w:1)
	/// Proof: `XcmCoreBuyer::RelayXcmWeightConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relay_xcm_weight_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_714_000 picoseconds.
		Weight::from_parts(1_805_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `XcmCoreBuyer::RelayChain` (r:0 w:1)
	/// Proof: `XcmCoreBuyer::RelayChain` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_relay_chain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_680_000 picoseconds.
		Weight::from_parts(1_787_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
