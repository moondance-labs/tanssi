// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_pooled_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `girazoki-XPS-15-9500`, CPU: `Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_pooled_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_pooled_staking.
pub trait WeightInfo {
	fn request_delegate() -> Weight;
	fn execute_pending_operations() -> Weight;
	fn request_undelegate() -> Weight;
	fn claim_manual_rewards(b: u32, ) -> Weight;
	fn rebalance_hold() -> Weight;
	fn update_candidate_position(b: u32, ) -> Weight;
}

/// Weights for pallet_pooled_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: PooledStaking Pools (r:9 w:5)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	fn request_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `107`
		//  Estimated: `23372`
		// Minimum execution time: 339_780_000 picoseconds.
		Weight::from_parts(356_428_000, 23372)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking Pools (r:10 w:8)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn execute_pending_operations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `26416`
		// Minimum execution time: 292_648_000 picoseconds.
		Weight::from_parts(294_297_000, 26416)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: PooledStaking Pools (r:13 w:9)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	fn request_undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `557`
		//  Estimated: `33722`
		// Minimum execution time: 334_348_000 picoseconds.
		Weight::from_parts(336_595_000, 33722)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: PooledStaking Pools (r:300 w:100)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn claim_manual_rewards(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `360 + b * (456 ±0)`
		//  Estimated: `6196 + b * (7882 ±0)`
		// Minimum execution time: 180_118_000 picoseconds.
		Weight::from_parts(183_203_000, 6196)
			// Standard Error: 562_736
			.saturating_add(Weight::from_parts(90_672_997, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 7882).saturating_mul(b.into()))
	}
	/// Storage: PooledStaking Pools (r:4 w:1)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn rebalance_hold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `987`
		//  Estimated: `11877`
		// Minimum execution time: 217_263_000 picoseconds.
		Weight::from_parts(222_983_000, 11877)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: PooledStaking Pools (r:600 w:100)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 100]`.
	fn update_candidate_position(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `122 + b * (325 ±0)`
		//  Estimated: `1608 + b * (15176 ±0)`
		// Minimum execution time: 89_997_000 picoseconds.
		Weight::from_parts(90_320_000, 1608)
			// Standard Error: 304_258
			.saturating_add(Weight::from_parts(70_706_369, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 15176).saturating_mul(b.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: PooledStaking Pools (r:9 w:5)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	fn request_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `107`
		//  Estimated: `23372`
		// Minimum execution time: 339_780_000 picoseconds.
		Weight::from_parts(356_428_000, 23372)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking Pools (r:10 w:8)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn execute_pending_operations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `676`
		//  Estimated: `26416`
		// Minimum execution time: 292_648_000 picoseconds.
		Weight::from_parts(294_297_000, 26416)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: PooledStaking Pools (r:13 w:9)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PooledStaking PendingOperations (r:1 w:1)
	/// Proof Skipped: PooledStaking PendingOperations (max_values: None, max_size: None, mode: Measured)
	fn request_undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `557`
		//  Estimated: `33722`
		// Minimum execution time: 334_348_000 picoseconds.
		Weight::from_parts(336_595_000, 33722)
			.saturating_add(RocksDbWeight::get().reads(15_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: PooledStaking Pools (r:300 w:100)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn claim_manual_rewards(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `360 + b * (456 ±0)`
		//  Estimated: `6196 + b * (7882 ±0)`
		// Minimum execution time: 180_118_000 picoseconds.
		Weight::from_parts(183_203_000, 6196)
			// Standard Error: 562_736
			.saturating_add(Weight::from_parts(90_672_997, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 7882).saturating_mul(b.into()))
	}
	/// Storage: PooledStaking Pools (r:4 w:1)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Holds (r:1 w:1)
	/// Proof: Balances Holds (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn rebalance_hold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `987`
		//  Estimated: `11877`
		// Minimum execution time: 217_263_000 picoseconds.
		Weight::from_parts(222_983_000, 11877)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: PooledStaking Pools (r:600 w:100)
	/// Proof Skipped: PooledStaking Pools (max_values: None, max_size: None, mode: Measured)
	/// Storage: PooledStaking SortedEligibleCandidates (r:1 w:1)
	/// Proof Skipped: PooledStaking SortedEligibleCandidates (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 100]`.
	fn update_candidate_position(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `122 + b * (325 ±0)`
		//  Estimated: `1608 + b * (15176 ±0)`
		// Minimum execution time: 89_997_000 picoseconds.
		Weight::from_parts(90_320_000, 1608)
			// Standard Error: 304_258
			.saturating_add(Weight::from_parts(70_706_369, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((6_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 15176).saturating_mul(b.into()))
	}
}
