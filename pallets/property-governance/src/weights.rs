
//! Autogenerated weights for `pallet_property_governance`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `recrafter-Legion-5-16IRX9`, CPU: `Intel(R) Core(TM) i7-14650HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_property_governance
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/property-governance/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn propose() -> Weight;
	fn inquery_against_letting_agent() -> Weight;
	fn vote_on_proposal() -> Weight;
	fn vote_on_letting_agent_inquery() -> Weight;
}

/// Weight functions for `pallet_property_governance`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NftMarketplace::PropertyOwner` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::ProposalCount` (r:1 w:0)
	/// Proof: `PropertyGovernance::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::RoundsExpiring` (r:1 w:1)
	/// Proof: `PropertyGovernance::RoundsExpiring` (`max_values`: None, `max_size`: Some(422), added: 2897, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingVotes` (r:0 w:1)
	/// Proof: `PropertyGovernance::OngoingVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::Proposals` (r:0 w:1)
	/// Proof: `PropertyGovernance::Proposals` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn propose() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `11487`
		// Minimum execution time: 21_948_000 picoseconds.
		Weight::from_parts(22_884_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `NftMarketplace::PropertyOwner` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::InqueryCount` (r:1 w:0)
	/// Proof: `PropertyGovernance::InqueryCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::InqueryRoundsExpiring` (r:1 w:1)
	/// Proof: `PropertyGovernance::InqueryRoundsExpiring` (`max_values`: None, `max_size`: Some(422), added: 2897, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::Inqueries` (r:0 w:1)
	/// Proof: `PropertyGovernance::Inqueries` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingInqueryVotes` (r:0 w:1)
	/// Proof: `PropertyGovernance::OngoingInqueryVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn inquery_against_letting_agent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490`
		//  Estimated: `11487`
		// Minimum execution time: 21_715_000 picoseconds.
		Weight::from_parts(23_297_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `PropertyGovernance::Proposals` (r:1 w:0)
	/// Proof: `PropertyGovernance::Proposals` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketplace::PropertyOwner` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::ProposalVoter` (r:1 w:1)
	/// Proof: `PropertyGovernance::ProposalVoter` (`max_values`: None, `max_size`: Some(3222), added: 5697, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketplace::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingVotes` (r:1 w:1)
	/// Proof: `PropertyGovernance::OngoingVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn vote_on_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `723`
		//  Estimated: `11487`
		// Minimum execution time: 31_751_000 picoseconds.
		Weight::from_parts(33_281_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PropertyGovernance::Inqueries` (r:1 w:0)
	/// Proof: `PropertyGovernance::Inqueries` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketplace::PropertyOwner` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwner` (`max_values`: None, `max_size`: Some(8022), added: 10497, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::InqueryVoter` (r:1 w:1)
	/// Proof: `PropertyGovernance::InqueryVoter` (`max_values`: None, `max_size`: Some(3222), added: 5697, mode: `MaxEncodedLen`)
	/// Storage: `NftMarketplace::PropertyOwnerToken` (r:1 w:0)
	/// Proof: `NftMarketplace::PropertyOwnerToken` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `PropertyGovernance::OngoingInqueryVotes` (r:1 w:1)
	/// Proof: `PropertyGovernance::OngoingInqueryVotes` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	fn vote_on_letting_agent_inquery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `721`
		//  Estimated: `11487`
		// Minimum execution time: 31_772_000 picoseconds.
		Weight::from_parts(32_990_000, 0)
			.saturating_add(Weight::from_parts(0, 11487))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
