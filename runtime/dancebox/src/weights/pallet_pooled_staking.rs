// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_pooled_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-06-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-1`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tanssi-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_pooled_staking
// --extrinsic
// *
// --chain=dev
// --steps
// 50
// --repeat
// 20
// --template=benchmarking/frame-weight-runtime-template.hbs
// --json-file
// raw.json
// --output
// tmp/dancebox_weights/pallet_pooled_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_pooled_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pooled_staking::WeightInfo for SubstrateWeight<T> {
	/// Storage: `PooledStaking::Pools` (r:12 w:5)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::PendingOperations` (r:1 w:1)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1465`
		//  Estimated: `32155`
		// Minimum execution time: 194_244_000 picoseconds.
		Weight::from_parts(196_320_000, 32155)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `PooledStaking::PendingOperations` (r:100 w:100)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::Pools` (r:1000 w:800)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 100]`.
	fn execute_pending_operations(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `545 + b * (390 ±0)`
		//  Estimated: `3593 + b * (25141 ±0)`
		// Minimum execution time: 128_876_000 picoseconds.
		Weight::from_parts(27_271_043, 3593)
			// Standard Error: 30_522
			.saturating_add(Weight::from_parts(96_363_753, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((11_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((9_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 25141).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::Pools` (r:13 w:9)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::PendingOperations` (r:1 w:1)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `725`
		//  Estimated: `33890`
		// Minimum execution time: 145_912_000 picoseconds.
		Weight::from_parts(147_881_000, 33890)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:300 w:100)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 100]`.
	fn claim_manual_rewards(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `398 + b * (456 ±0)`
		//  Estimated: `6196 + b * (7882 ±0)`
		// Minimum execution time: 81_752_000 picoseconds.
		Weight::from_parts(38_231_640, 6196)
			// Standard Error: 13_820
			.saturating_add(Weight::from_parts(51_787_436, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 7882).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::Pools` (r:4 w:1)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	fn rebalance_hold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1019`
		//  Estimated: `11909`
		// Minimum execution time: 120_411_000 picoseconds.
		Weight::from_parts(121_756_000, 11909)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:600 w:100)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:100 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn update_candidate_position(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400 + b * (356 ±0)`
		//  Estimated: `1882 + b * (15206 ±0)`
		// Minimum execution time: 52_717_000 picoseconds.
		Weight::from_parts(1_492_103, 1882)
			// Standard Error: 17_965
			.saturating_add(Weight::from_parts(39_423_033, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 15206).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::Pools` (r:12 w:8)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn swap_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `478`
		//  Estimated: `31168`
		// Minimum execution time: 107_025_000 picoseconds.
		Weight::from_parts(109_000_000, 31168)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:9 w:5)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1341`
		//  Estimated: `24606`
		// Minimum execution time: 182_187_000 picoseconds.
		Weight::from_parts(186_128_000, 24606)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
}