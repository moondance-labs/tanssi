// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_inactivity_tracking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-07-14, STEPS: `16`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `192.168.1.111`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dancelight-dev"), DB CACHE: 1024

// Executed Command:
// target/release/tanssi-relay
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_inactivity_tracking
// --extrinsic
// *
// --chain=dancelight-dev
// --steps
// 16
// --repeat
// 1
// --template=benchmarking/frame-weight-runtime-template.hbs
// --json-file
// raw.json
// --output
// tmp/dancelight_weights/pallet_inactivity_tracking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for pallet_inactivity_tracking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_inactivity_tracking::WeightInfo for SubstrateWeight<T> {
	/// Storage: `InactivityTracking::CurrentActivityTrackingStatus` (r:1 w:1)
	/// Proof: `InactivityTracking::CurrentActivityTrackingStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `InactivityTracking::ActiveCollatorsForCurrentSession` (r:0 w:1)
	/// Proof: `InactivityTracking::ActiveCollatorsForCurrentSession` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	fn set_inactivity_tracking_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `1905`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_000_000, 1905)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `InactivityTracking::EnableMarkingOffline` (r:0 w:1)
	/// Proof: `InactivityTracking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn enable_offline_marking() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `InactivityTracking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `InactivityTracking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `InactivityTracking::OfflineCollators` (r:1 w:1)
	/// Proof: `InactivityTracking::OfflineCollators` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `TanssiInvulnerables::Invulnerables` (r:1 w:0)
	/// Proof: `TanssiInvulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:6 w:1)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_offline() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1710`
		//  Estimated: `16518`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(66_000_000, 16518)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `InactivityTracking::OfflineCollators` (r:1 w:1)
	/// Proof: `InactivityTracking::OfflineCollators` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:6 w:1)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_online() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1469`
		//  Estimated: `16518`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(47_000_000, 16518)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `InactivityTracking::CurrentActivityTrackingStatus` (r:1 w:0)
	/// Proof: `InactivityTracking::CurrentActivityTrackingStatus` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `InactivityTracking::InactiveCollators` (r:5 w:0)
	/// Proof: `InactivityTracking::InactiveCollators` (`max_values`: None, `max_size`: Some(3214), added: 5689, mode: `MaxEncodedLen`)
	/// Storage: `InactivityTracking::EnableMarkingOffline` (r:1 w:0)
	/// Proof: `InactivityTracking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `InactivityTracking::OfflineCollators` (r:1 w:1)
	/// Proof: `InactivityTracking::OfflineCollators` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `TanssiInvulnerables::Invulnerables` (r:1 w:0)
	/// Proof: `TanssiInvulnerables::Invulnerables` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:6 w:1)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn notify_inactive_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1949`
		//  Estimated: `29435`
		// Minimum execution time: 83_000_000 picoseconds.
		Weight::from_parts(83_000_000, 29435)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}