// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-11-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `deo-github-runner-3.prod.opslayer.tech`, CPU: `AMD EPYC 4584PX 16-Core Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dancelight-dev"), DB CACHE: 1024

// Executed Command:
// target/release/tanssi-relay
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_collective
// --extrinsic
// *
// --chain=dancelight-dev
// --steps
// 50
// --repeat
// 20
// --template=benchmarking/frame-weight-runtime-template.hbs
// --json-file
// raw.json
// --output
// tmp/dancelight_weights/pallet_collective.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for SubstrateWeight<T> {
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:100 w:100)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3190 ±0)`
		//  Estimated: `15795 + m * (1967 ±23) + p * (4332 ±23)`
		// Minimum execution time: 16_410_000 picoseconds.
		Weight::from_parts(16_541_000, 15795)
			// Standard Error: 67_948
			.saturating_add(Weight::from_parts(3_123_785, 0).saturating_mul(m.into()))
			// Standard Error: 67_948
			.saturating_add(Weight::from_parts(7_092_533, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 1967).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 4332).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(_b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178 + m * (32 ±0)`
		//  Estimated: `1664 + m * (32 ±0)`
		// Minimum execution time: 14_106_000 picoseconds.
		Weight::from_parts(28_169_900, 1664)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(_b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178 + m * (32 ±0)`
		//  Estimated: `3644 + m * (32 ±0)`
		// Minimum execution time: 17_293_000 picoseconds.
		Weight::from_parts(44_376_901, 3644)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalCount` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(_b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `3818 + m * (33 ±0) + p * (36 ±0)`
		// Minimum execution time: 18_314_000 picoseconds.
		Weight::from_parts(34_627_457, 3818)
			// Standard Error: 11_021
			.saturating_add(Weight::from_parts(30_856, 0).saturating_mul(m.into()))
			// Standard Error: 10_882
			.saturating_add(Weight::from_parts(202_765, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `875 + m * (64 ±0)`
		//  Estimated: `4339 + m * (64 ±0)`
		// Minimum execution time: 19_417_000 picoseconds.
		Weight::from_parts(25_143_196, 4339)
			// Standard Error: 15_834
			.saturating_add(Weight::from_parts(40_866, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `464 + m * (64 ±0) + p * (36 ±0)`
		//  Estimated: `3909 + m * (65 ±0) + p * (36 ±0)`
		// Minimum execution time: 20_799_000 picoseconds.
		Weight::from_parts(34_502_485, 3909)
			// Standard Error: 9_544
			.saturating_add(Weight::from_parts(147_212, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `808 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4125 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 30_618_000 picoseconds.
		Weight::from_parts(30_733_389, 4125)
			// Standard Error: 517
			.saturating_add(Weight::from_parts(1_656, 0).saturating_mul(b.into()))
			// Standard Error: 5_465
			.saturating_add(Weight::from_parts(14_756, 0).saturating_mul(m.into()))
			// Standard Error: 5_327
			.saturating_add(Weight::from_parts(188_014, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562 + m * (48 ±0) + p * (36 ±0)`
		//  Estimated: `4002 + m * (49 ±0) + p * (36 ±0)`
		// Minimum execution time: 21_360_000 picoseconds.
		Weight::from_parts(21_863_317, 4002)
			// Standard Error: 3_152
			.saturating_add(Weight::from_parts(12_194, 0).saturating_mul(m.into()))
			// Standard Error: 3_074
			.saturating_add(Weight::from_parts(173_540, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Members` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Prime` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `MaintenanceMode::MaintenanceMode` (r:1 w:0)
	/// Proof: `MaintenanceMode::MaintenanceMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `828 + b * (1 ±0) + m * (64 ±0) + p * (40 ±0)`
		//  Estimated: `4145 + b * (1 ±0) + m * (66 ±0) + p * (40 ±0)`
		// Minimum execution time: 32_231_000 picoseconds.
		Weight::from_parts(29_945_915, 4145)
			// Standard Error: 474
			.saturating_add(Weight::from_parts(3_632, 0).saturating_mul(b.into()))
			// Standard Error: 5_014
			.saturating_add(Weight::from_parts(19_738, 0).saturating_mul(m.into()))
			// Standard Error: 4_887
			.saturating_add(Weight::from_parts(192_303, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
			.saturating_add(Weight::from_parts(0, 66).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + p * (32 ±0)`
		//  Estimated: `1778 + p * (32 ±0)`
		// Minimum execution time: 11_261_000 picoseconds.
		Weight::from_parts(12_097_861, 1778)
			// Standard Error: 2_580
			.saturating_add(Weight::from_parts(154_560, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::CostOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Proposals` (r:1 w:1)
	/// Proof: `OpenTechCommitteeCollective::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::Voting` (r:0 w:1)
	/// Proof: `OpenTechCommitteeCollective::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `d` is `[0, 1]`.
	/// The range of component `p` is `[1, 100]`.
	fn kill(d: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1564 + p * (36 ±0)`
		//  Estimated: `4963 + d * (123 ±6) + p * (37 ±0)`
		// Minimum execution time: 16_020_000 picoseconds.
		Weight::from_parts(15_731_113, 4963)
			// Standard Error: 189_521
			.saturating_add(Weight::from_parts(1_555_009, 0).saturating_mul(d.into()))
			// Standard Error: 2_935
			.saturating_add(Weight::from_parts(186_519, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 123).saturating_mul(d.into()))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `OpenTechCommitteeCollective::ProposalOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OpenTechCommitteeCollective::CostOf` (r:1 w:0)
	/// Proof: `OpenTechCommitteeCollective::CostOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn release_proposal_cost() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `978`
		//  Estimated: `4443`
		// Minimum execution time: 12_584_000 picoseconds.
		Weight::from_parts(12_774_000, 4443)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
}