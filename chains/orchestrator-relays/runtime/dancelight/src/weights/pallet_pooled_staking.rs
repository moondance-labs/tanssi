// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_pooled_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-07-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `qco-github-runner-3.prod.opslayer.tech`, CPU: `AMD EPYC 4584PX 16-Core Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dancelight-dev"), DB CACHE: 1024

// Executed Command:
// target/release/tanssi-relay
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_pooled_staking
// --extrinsic
// *
// --chain=dancelight-dev
// --steps
// 50
// --repeat
// 20
// --template=benchmarking/frame-weight-runtime-template.hbs
// --json-file
// raw.json
// --output
// tmp/dancelight_weights/pallet_pooled_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_pooled_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pooled_staking::WeightInfo for SubstrateWeight<T> {
	/// Storage: `PooledStaking::PausePoolsExtrinsics` (r:1 w:0)
	/// Proof: `PooledStaking::PausePoolsExtrinsics` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:12 w:5)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::DelegatorCandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::DelegatorCandidateSummaries` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::CandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::CandidateSummaries` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::PendingOperations` (r:1 w:1)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	fn request_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1901`
		//  Estimated: `32046`
		// Minimum execution time: 146_174_000 picoseconds.
		Weight::from_parts(148_438_000, 32046)
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: `PooledStaking::PausePoolsExtrinsics` (r:1 w:0)
	/// Proof: `PooledStaking::PausePoolsExtrinsics` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::PendingOperations` (r:100 w:100)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::Pools` (r:1000 w:800)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::DelegatorCandidateSummaries` (r:100 w:100)
	/// Proof: `PooledStaking::DelegatorCandidateSummaries` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::CandidateSummaries` (r:100 w:100)
	/// Proof: `PooledStaking::CandidateSummaries` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 100]`.
	fn execute_pending_operations(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `656 + b * (519 ±0)`
		//  Estimated: `3640 + b * (25880 ±0)`
		// Minimum execution time: 104_776_000 picoseconds.
		Weight::from_parts(50_656_648, 3640)
			// Standard Error: 55_483
			.saturating_add(Weight::from_parts(80_048_046, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((13_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((11_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 25880).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::PausePoolsExtrinsics` (r:1 w:0)
	/// Proof: `PooledStaking::PausePoolsExtrinsics` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:13 w:9)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::DelegatorCandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::DelegatorCandidateSummaries` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::CandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::CandidateSummaries` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PooledStaking::PendingOperations` (r:1 w:1)
	/// Proof: `PooledStaking::PendingOperations` (`max_values`: None, `max_size`: Some(117), added: 2592, mode: `MaxEncodedLen`)
	fn request_undelegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `933`
		//  Estimated: `34634`
		// Minimum execution time: 111_228_000 picoseconds.
		Weight::from_parts(112_130_000, 34634)
			.saturating_add(T::DbWeight::get().reads(19_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:300 w:100)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 100]`.
	fn claim_manual_rewards(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `428 + b * (456 ±0)`
		//  Estimated: `6196 + b * (7764 ±0)`
		// Minimum execution time: 53_009_000 picoseconds.
		Weight::from_parts(22_160_540, 6196)
			// Standard Error: 21_289
			.saturating_add(Weight::from_parts(36_069_688, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 7764).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::Pools` (r:4 w:1)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	fn rebalance_hold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1049`
		//  Estimated: `11342`
		// Minimum execution time: 82_695_000 picoseconds.
		Weight::from_parts(83_275_000, 11342)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:600 w:100)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:100 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 100]`.
	fn update_candidate_position(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495 + b * (551 ±0)`
		//  Estimated: `6287 + b * (15528 ±0)`
		// Minimum execution time: 37_941_000 picoseconds.
		Weight::from_parts(38_242_000, 6287)
			// Standard Error: 22_192
			.saturating_add(Weight::from_parts(28_059_727, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_parts(0, 15528).saturating_mul(b.into()))
	}
	/// Storage: `PooledStaking::PausePoolsExtrinsics` (r:1 w:0)
	/// Proof: `PooledStaking::PausePoolsExtrinsics` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::Pools` (r:12 w:8)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::DelegatorCandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::DelegatorCandidateSummaries` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::CandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::CandidateSummaries` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn swap_pool() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686`
		//  Estimated: `32046`
		// Minimum execution time: 84_498_000 picoseconds.
		Weight::from_parts(85_941_000, 32046)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: `PooledStaking::Pools` (r:9 w:5)
	/// Proof: `PooledStaking::Pools` (`max_values`: None, `max_size`: Some(113), added: 2588, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::DelegatorCandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::DelegatorCandidateSummaries` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::CandidateSummaries` (r:1 w:1)
	/// Proof: `PooledStaking::CandidateSummaries` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `PooledStaking::SortedEligibleCandidates` (r:1 w:1)
	/// Proof: `PooledStaking::SortedEligibleCandidates` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1776`
		//  Estimated: `24282`
		// Minimum execution time: 135_123_000 picoseconds.
		Weight::from_parts(136_996_000, 24282)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
}