// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for runtime_parachains::inclusion
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-1`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("starlight-dev"), DB CACHE: 1024

// Executed Command:
// target/release/tanssi-relay
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// runtime_parachains::inclusion
// --extrinsic
// *
// --chain=starlight-dev
// --steps
// 50
// --repeat
// 20
// --template=benchmarking/frame-weight-runtime-template.hbs
// --json-file
// raw.json
// --output
// tmp/starlight_weights/runtime_parachains::inclusion.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for runtime_parachains::inclusion using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> runtime_parachains::inclusion::WeightInfo for SubstrateWeight<T> {
	
	fn enact_candidate(u: u32, h: u32, c: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `33353 + c * (16114 ±0) + h * (75 ±0)`
		//  Estimated: `36818 + c * (26467 ±0) + h * (2551 ±0)`
		// Minimum execution time: 4_829_551_000 picoseconds.
		Weight::from_parts(1_892_697_027, 0)
			.saturating_add(Weight::from_parts(0, 36818))
			// Standard Error: 793_993
			.saturating_add(Weight::from_parts(126_698_671, 0).saturating_mul(u.into()))
			// Standard Error: 793_993
			.saturating_add(Weight::from_parts(144_116_038, 0).saturating_mul(h.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(h.into())))
			.saturating_add(T::DbWeight::get().reads((8_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(10))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(h.into())))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 26467).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2551).saturating_mul(h.into()))
	}
}