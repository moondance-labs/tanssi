[package]
name = "dancelight-runtime"
authors = { workspace = true }
description = "Dancelight runtime"
edition = "2021"
license = "GPL-3.0-only"
version = "0.1.0"

[package.metadata.docs.rs]
targets = [ "x86_64-unknown-linux-gnu" ]

[lints]
workspace = true

[dependencies]
bitvec = { workspace = true }
log = { workspace = true }
parity-scale-codec = { workspace = true, features = [ "derive", "max-encoded-len" ] }
scale-info = { workspace = true, features = [ "derive" ] }
serde = { workspace = true }
serde_derive = { workspace = true, optional = true }
serde_json = { workspace = true, features = [ "alloc" ] }
smallvec = { workspace = true }
static_assertions = { workspace = true }

authority-discovery-primitives = { workspace = true }
babe-primitives = { workspace = true }
beefy-primitives = { workspace = true }
binary-merkle-tree = { workspace = true }
block-builder-api = { workspace = true }
dancelight-runtime-constants = { workspace = true }
grandpa_primitives = { workspace = true }
inherents = { workspace = true }
offchain-primitives = { workspace = true }
sp-api = { workspace = true }
sp-application-crypto = { workspace = true }
sp-arithmetic = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-core = { workspace = true }
sp-debug-derive = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-io = { workspace = true }
sp-keystore = { workspace = true }
sp-mmr-primitives = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-staking = { workspace = true }
sp-std = { workspace = true }
sp-storage = { workspace = true }
sp-trie = { workspace = true }
sp-version = { workspace = true }
tx-pool-api = { workspace = true }

frame-executive = { workspace = true }
frame-metadata-hash-extension = { workspace = true }
frame-support = { workspace = true, features = [ "tuples-96" ] }
frame-system = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
nimbus-primitives = { workspace = true }
pallet-asset-rate = { workspace = true }
pallet-authority-assignment = { workspace = true }
pallet-authority-discovery = { workspace = true }
pallet-authority-mapping = { workspace = true }
pallet-authorship = { workspace = true }
pallet-babe = { workspace = true }
pallet-balances = { workspace = true }
pallet-beefy = { workspace = true }
pallet-beefy-mmr = { workspace = true }
pallet-collator-assignment = { workspace = true }
pallet-collective = { workspace = true }
pallet-conviction-voting = { workspace = true }
pallet-democracy = { workspace = true }
pallet-elections-phragmen = { workspace = true }
pallet-external-validators = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-identity = { workspace = true }
pallet-initializer = { workspace = true }
pallet-invulnerables = { workspace = true }
pallet-membership = { workspace = true }
pallet-message-queue = { workspace = true }
pallet-mmr = { workspace = true }
pallet-multiblock-migrations = { workspace = true }
pallet-multisig = { workspace = true }
pallet-offences = { workspace = true }
pallet-parameters = { workspace = true }
pallet-preimage = { workspace = true }
pallet-proxy = { workspace = true }
pallet-ranked-collective = { workspace = true }
pallet-referenda = { workspace = true }
pallet-root-testing = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-session = { workspace = true }
pallet-staking = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-tips = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-utility = { workspace = true }
pallet-whitelist = { workspace = true }
pallet-xcm = { workspace = true }
pallet-xcm-benchmarks = { workspace = true, optional = true }

frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-try-runtime = { workspace = true, optional = true }
hex-literal = { workspace = true }

polkadot-parachain-primitives = { workspace = true }
primitives = { workspace = true }
runtime-common = { workspace = true }
runtime-parachains = { workspace = true }

xcm = { workspace = true }
xcm-builder = { workspace = true }
xcm-executor = { workspace = true }
xcm-runtime-apis = { workspace = true }

# Cumulus
cumulus-pallet-parachain-system = { workspace = true }
cumulus-primitives-core = { workspace = true }

# Tanssi
dp-consensus = { workspace = true }
dp-container-chain-genesis-data = { workspace = true }
tp-author-noting-inherent = { workspace = true }
tp-traits = { workspace = true }

pallet-author-noting = { workspace = true }
pallet-author-noting-runtime-api = { workspace = true }
pallet-configuration = { workspace = true }
pallet-data-preservers = { workspace = true }
pallet-inflation-rewards = { workspace = true }
pallet-registrar = { workspace = true }
pallet-registrar-runtime-api = { workspace = true }
pallet-services-payment = { workspace = true }
pallet-services-payment-runtime-api = { workspace = true }
tanssi-runtime-common = { workspace = true }

# Moonkit
pallet-migrations = { workspace = true }

# Bridges
snowbridge-beacon-primitives = { workspace = true }
snowbridge-pallet-ethereum-client = { workspace = true }

[dev-dependencies]
keyring = { workspace = true }
milagro-bls = { workspace = true, features = [ "std" ] }
rand = { workspace = true, features = [ "std", "std_rng" ] }
remote-externalities = { workspace = true }
separator = { workspace = true }
serde_json = { workspace = true }
sp-tracing = { workspace = true }
sp-trie = { workspace = true }
test-relay-sproof-builder = { workspace = true }
tiny-keccak = { workspace = true }
tokio = { workspace = true, features = [ "macros" ] }

[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = [ "std" ]
std = [
	"authority-discovery-primitives/std",
	"babe-primitives/std",
	"beefy-primitives/std",
	"binary-merkle-tree/std",
	"bitvec/std",
	"block-builder-api/std",
	"cumulus-pallet-parachain-system/std",
	"cumulus-primitives-core/std",
	"dancelight-runtime-constants/std",
	"dp-consensus/std",
	"dp-container-chain-genesis-data/std",
	"frame-benchmarking?/std",
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime/std",
	"grandpa_primitives/std",
	"inherents/std",
	"keyring/std",
	"log/std",
	"milagro-bls/std",
	"nimbus-primitives/std",
	"offchain-primitives/std",
	"pallet-asset-rate/std",
	"pallet-author-noting-runtime-api/std",
	"pallet-author-noting/std",
	"pallet-authority-assignment/std",
	"pallet-authority-discovery/std",
	"pallet-authority-mapping/std",
	"pallet-authorship/std",
	"pallet-babe/std",
	"pallet-balances/std",
	"pallet-beefy-mmr/std",
	"pallet-beefy/std",
	"pallet-collator-assignment/std",
	"pallet-collective/std",
	"pallet-configuration/std",
	"pallet-conviction-voting/std",
	"pallet-data-preservers/std",
	"pallet-democracy/std",
	"pallet-elections-phragmen/std",
	"pallet-external-validators/std",
	"pallet-grandpa/std",
	"pallet-identity/std",
	"pallet-inflation-rewards/std",
	"pallet-initializer/std",
	"pallet-invulnerables/std",
	"pallet-membership/std",
	"pallet-message-queue/std",
	"pallet-migrations/std",
	"pallet-mmr/std",
	"pallet-multiblock-migrations/std",
	"pallet-multisig/std",
	"pallet-offences/std",
	"pallet-parameters/std",
	"pallet-preimage/std",
	"pallet-proxy/std",
	"pallet-ranked-collective/std",
	"pallet-referenda/std",
	"pallet-registrar-runtime-api/std",
	"pallet-registrar/std",
	"pallet-root-testing/std",
	"pallet-scheduler/std",
	"pallet-services-payment-runtime-api/std",
	"pallet-services-payment/std",
	"pallet-session/std",
	"pallet-staking/std",
	"pallet-sudo/std",
	"pallet-timestamp/std",
	"pallet-tips/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-treasury/std",
	"pallet-utility/std",
	"pallet-whitelist/std",
	"pallet-xcm-benchmarks?/std",
	"pallet-xcm/std",
	"parity-scale-codec/std",
	"polkadot-parachain-primitives/std",
	"primitives/std",
	"rand/std",
	"runtime-common/std",
	"runtime-parachains/std",
	"scale-info/std",
	"serde/std",
	"serde_derive",
	"serde_json/std",
	"snowbridge-beacon-primitives/std",
	"snowbridge-pallet-ethereum-client/fuzzing",
	"snowbridge-pallet-ethereum-client/std",
	"sp-api/std",
	"sp-application-crypto/std",
	"sp-arithmetic/std",
	"sp-consensus-aura/std",
	"sp-core/std",
	"sp-debug-derive/std",
	"sp-genesis-builder/std",
	"sp-io/std",
	"sp-keystore/std",
	"sp-mmr-primitives/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-std/std",
	"sp-storage/std",
	"sp-tracing/std",
	"sp-trie/std",
	"sp-version/std",
	"substrate-wasm-builder",
	"tanssi-runtime-common/std",
	"test-relay-sproof-builder/std",
	"tp-author-noting-inherent/std",
	"tp-traits/std",
	"tx-pool-api/std",
	"xcm-builder/std",
	"xcm-executor/std",
	"xcm-runtime-apis/std",
	"xcm/std",
]
no_std = []

runtime-benchmarks = [
	"cumulus-pallet-parachain-system/runtime-benchmarks",
	"cumulus-primitives-core/runtime-benchmarks",
	"dp-consensus/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"nimbus-primitives/runtime-benchmarks",
	"pallet-asset-rate/runtime-benchmarks",
	"pallet-author-noting/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-collator-assignment/runtime-benchmarks",
	"pallet-collator-assignment/runtime-benchmarks",
	"pallet-collective/runtime-benchmarks",
	"pallet-configuration/runtime-benchmarks",
	"pallet-conviction-voting/runtime-benchmarks",
	"pallet-data-preservers/runtime-benchmarks",
	"pallet-democracy/runtime-benchmarks",
	"pallet-elections-phragmen/runtime-benchmarks",
	"pallet-external-validators/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-identity/runtime-benchmarks",
	"pallet-inflation-rewards/runtime-benchmarks",
	"pallet-invulnerables/runtime-benchmarks",
	"pallet-membership/runtime-benchmarks",
	"pallet-message-queue/runtime-benchmarks",
	"pallet-migrations/runtime-benchmarks",
	"pallet-mmr/runtime-benchmarks",
	"pallet-multiblock-migrations/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-offences/runtime-benchmarks",
	"pallet-parameters/runtime-benchmarks",
	"pallet-preimage/runtime-benchmarks",
	"pallet-proxy/runtime-benchmarks",
	"pallet-ranked-collective/runtime-benchmarks",
	"pallet-referenda/runtime-benchmarks",
	"pallet-registrar/runtime-benchmarks",
	"pallet-scheduler/runtime-benchmarks",
	"pallet-services-payment/runtime-benchmarks",
	"pallet-staking/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-tips/runtime-benchmarks",
	"pallet-treasury/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"pallet-whitelist/runtime-benchmarks",
	"pallet-xcm-benchmarks/runtime-benchmarks",
	"pallet-xcm/runtime-benchmarks",
	"polkadot-parachain-primitives/runtime-benchmarks",
	"primitives/runtime-benchmarks",
	"runtime-common/runtime-benchmarks",
	"runtime-parachains/runtime-benchmarks",
	"snowbridge-pallet-ethereum-client/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"sp-staking/runtime-benchmarks",
	"tanssi-runtime-common/runtime-benchmarks",
	"tp-traits/runtime-benchmarks",
	"xcm-builder/runtime-benchmarks",
	"xcm-executor/runtime-benchmarks",
	"xcm-runtime-apis/runtime-benchmarks",
]
try-runtime = [
	"cumulus-pallet-parachain-system/try-runtime",
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime",
	"frame-try-runtime/try-runtime",
	"nimbus-primitives/try-runtime",
	"pallet-asset-rate/try-runtime",
	"pallet-author-noting/try-runtime",
	"pallet-authority-assignment/try-runtime",
	"pallet-authority-discovery/try-runtime",
	"pallet-authority-mapping/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-beefy-mmr/try-runtime",
	"pallet-beefy/try-runtime",
	"pallet-collator-assignment/try-runtime",
	"pallet-collective/try-runtime",
	"pallet-configuration/try-runtime",
	"pallet-conviction-voting/try-runtime",
	"pallet-data-preservers/try-runtime",
	"pallet-democracy/try-runtime",
	"pallet-elections-phragmen/try-runtime",
	"pallet-external-validators/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-identity/try-runtime",
	"pallet-inflation-rewards/try-runtime",
	"pallet-initializer/try-runtime",
	"pallet-invulnerables/try-runtime",
	"pallet-membership/try-runtime",
	"pallet-message-queue/try-runtime",
	"pallet-migrations/try-runtime",
	"pallet-mmr/try-runtime",
	"pallet-multiblock-migrations/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-offences/try-runtime",
	"pallet-parameters/try-runtime",
	"pallet-preimage/try-runtime",
	"pallet-proxy/try-runtime",
	"pallet-ranked-collective/try-runtime",
	"pallet-referenda/try-runtime",
	"pallet-registrar/try-runtime",
	"pallet-root-testing/try-runtime",
	"pallet-scheduler/try-runtime",
	"pallet-services-payment/try-runtime",
	"pallet-session/try-runtime",
	"pallet-staking/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-tips/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-treasury/try-runtime",
	"pallet-utility/try-runtime",
	"pallet-whitelist/try-runtime",
	"pallet-xcm/try-runtime",
	"runtime-common/try-runtime",
	"runtime-parachains/try-runtime",
	"snowbridge-pallet-ethereum-client/try-runtime",
	"sp-runtime/try-runtime",
	"tanssi-runtime-common/try-runtime",
]

# Set timing constants (e.g. session period) to faster versions to speed up testing.
fast-runtime = [ "dancelight-runtime-constants/fast-runtime" ]

# Allow to print logs details (no wasm:stripped)
force-debug = [ "sp-debug-derive/force-debug" ]

runtime-metrics = [ "runtime-parachains/runtime-metrics", "sp-io/with-tracing" ]

# A feature that should be enabled when the runtime should be built for on-chain
# deployment. This will disable stuff that shouldn't be part of the on-chain wasm
# to make it smaller, like logging for example.
on-chain-release-build = [ "sp-api/disable-logging" ]
