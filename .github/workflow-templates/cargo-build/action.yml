name: Cargo build
description: |
  Builds tanssi and templates with given features.
  Stores the result in "binaries/" and the runtimes in "runtimes/"

inputs:
  features:
    description: features to include in the build (comma separated)
    required: false

runs:
  using: "composite"
  steps:
#    - name: Restore cargo registry cache
#      uses: actions/cache@v4
#      with:
#        path: |
#          ~/.cargo/bin/
#          ~/.cargo/registry/index/
#          ~/.cargo/registry/cache/
#          ~/.cargo/git/db/
#        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

#    - name: Restore sccache cache
#      uses: actions/cache@v4
#      with:
#        path: ~/.cache/sccache
#        key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/*.rs') }}

# TODO: remove (trigger job 2)
    - name: Show Cargo and sccache cache sizes
      shell: bash
      run: |
        echo "🧱 Cargo cache:"
        du -sh ~/.cargo || echo "No cargo cache found"
        echo "📦 Cargo registry index:"
        du -sh ~/.cargo/registry/index || echo "No index"
        echo "📦 Cargo registry cache:"
        du -sh ~/.cargo/registry/cache || echo "No cache"
        echo "🧰 Git dependencies:"
        du -sh ~/.cargo/git || echo "No git cache"
        echo "🎯 Target directory:"
        du -sh target || echo "No target directory"
        echo "🗃️ sccache:"
        du -sh ~/.cache/sccache || echo "No sccache"

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9
    - name: Setup Variables
      shell: bash
      run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=100GB" >> $GITHUB_ENV  
        # Set RUSTFLAGS if not already set
        if [ -z "$RUSTFLAGS" ]; then
          echo "RUSTFLAGS=-C opt-level=3 -D warnings -C linker=clang -C link-arg=-fuse-ld=$(pwd)/mold/bin/mold" >> $GITHUB_ENV
        fi
    - name: Setup Mold Linker
      shell: bash
      run: |
        mkdir -p mold
        wget https://github.com/rui314/mold/releases/download/v2.30.0/mold-2.30.0-$(uname -m)-linux.tar.gz -O - | tar -C $(realpath mold) --strip-components=1 -xzf -
    # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
    # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
    - name: Setup Rust toolchain
      shell: bash
      run: |
        if ! which "rustup" > /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        fi
        rustup show
    - name: Build Node
      shell: bash
      run: |
        env
        params=" --locked --release"
        if [ -n "${{ inputs.features }}" ]; then
          params="$params --features ${{ inputs.features }}"
        fi
        echo "cargo build $params"
        cargo build $params
    - name: Display binary comments
      shell: bash
      run: readelf -p .comment ./target/release/tanssi-node
    - name: Display sccache stats
      shell: bash
      run: ${SCCACHE_PATH} --show-stats
    - name: Verify binary version
      shell: bash
      run: |
        GIT_COMMIT=`git log -1 --format="%H" | cut -c1-7`
        TS_VERSION=`./target/release/tanssi-node --version`
        echo "Checking $TS_VERSION contains $GIT_COMMIT"
        echo "$TS_VERSION" | grep $GIT_COMMIT
    - name: Save runtimes wasm
      shell: bash
      run: |
        mkdir -p runtimes
        cp target/release/wbuild/container-chain-template-simple-runtime/container_chain_template_simple_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/container-chain-template-frontier-runtime/container_chain_template_frontier_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/dancebox-runtime/dancebox_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/flashbox-runtime/flashbox_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/dancelight-runtime/dancelight_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/starlight-runtime/starlight_runtime.compact.compressed.wasm runtimes/;

    - name: Copy parachain node binaries
      uses: ./.github/workflow-templates/copy-parachain-node-binaries
      with:
        cpu: ""
        profile: "release"

    - name: Copy relaychain node binaries
      uses: ./.github/workflow-templates/copy-relaychain-node-binaries
      with:
        cpu: ""
        profile: "release"

    - name: Show sccache stats
      run: sccache --show-stats