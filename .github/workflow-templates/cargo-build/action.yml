name: Cargo build
description: |
  Builds tanssi and templates with given features.
  Stores the result in "binaries/" and the runtimes in "runtimes/"

inputs:
  features:
    description: features to include in the build (comma separated)
    required: false

runs:
  using: "composite"
  steps:
    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9
    - name: Setup Variables
      shell: bash
      run: |
        echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_CACHE_SIZE=100GB" >> $GITHUB_ENV  
        # Set RUSTFLAGS if not already set
        if [ -z "$RUSTFLAGS" ]; then
          echo "RUSTFLAGS=-C opt-level=3 -D warnings -C linker=clang -C link-arg=-fuse-ld=$(pwd)/mold/bin/mold" >> $GITHUB_ENV
        fi
    - name: Setup Mold Linker
      shell: bash
      run: |
        mkdir -p mold
        wget https://github.com/rui314/mold/releases/download/v2.30.0/mold-2.30.0-$(uname -m)-linux.tar.gz -O - | tar -C $(realpath mold) --strip-components=1 -xzf -
    # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
    # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
    - name: Setup Rust toolchain
      shell: bash
      run: |
        if ! which "rustup" > /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        fi
        rustup show
        
    - name: Define cache paths
      id: cache-paths
      shell: bash
      run: |
        paths=$(cat <<EOF
        ./target/release/tanssi-relay
        ./target/release/tanssi-relay-execute-worker
        ./target/release/tanssi-relay-prepare-worker
        ./target/release/tanssi-node
        ./target/release/container-chain-frontier-node
        ./target/release/container-chain-simple-node
        ./target/release/wbuild/container-chain-template-simple-runtime/container_chain_template_simple_runtime.compact.compressed.wasm
        ./target/release/wbuild/container-chain-template-frontier-runtime/container_chain_template_frontier_runtime.compact.compressed.wasm
        ./target/release/wbuild/dancebox-runtime/dancebox_runtime.compact.compressed.wasm
        ./target/release/wbuild/flashbox-runtime/flashbox_runtime.compact.compressed.wasm
        ./target/release/wbuild/dancelight-runtime/dancelight_runtime.compact.compressed.wasm
        ./target/release/wbuild/starlight-runtime/starlight_runtime.compact.compressed.wasm
        EOF
        )
        echo "paths<<EOF" >> $GITHUB_OUTPUT
        echo "$paths" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Compute build cache key
      id: compute-cache-key
      shell: bash
      run: |
        features_hash=$(echo "${{ inputs.features }}" | sha256sum | cut -d' ' -f1)
        sources_hash=$(find . \
          -path ./target -prune -o \
          -path ./tmp -prune -o \
          -path ./node_modules -prune -o \
          -type f \( -name "*.rs" -o -name "*.toml" \) -print0 \
          | sort -z | xargs -0 sha256sum | sha256sum | cut -d' ' -f1)
        key="cargo-build-key-${features_hash}-${sources_hash}"
        echo "Computed cache key: $key"
        echo "key=$key" >> $GITHUB_OUTPUT

    - name: Restore build cache
      uses: actions/cache/restore@v4
      id: cache-restore
      with:
        path: ${{ steps.cache-paths.outputs.paths }}
        key: ${{ steps.compute-cache-key.outputs.key }}

    - name: Build Node (if cache miss)
      if: steps.cache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        params=" --locked --release"
        if [ -n "${{ inputs.features }}" ]; then
          params="$params --features ${{ inputs.features }}"
        fi
        echo "cargo build $params"
        cargo build $params

    - name: Save build cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.cache-paths.outputs.paths }}
        key: ${{ steps.compute-cache-key.outputs.key }}

    - name: Display binary comments
      shell: bash
      run: readelf -p .comment ./target/release/tanssi-node
    - name: Display sccache stats
      shell: bash
      run: ${SCCACHE_PATH} --show-stats
    # TODO: Remove binary verification
    - name: Verify binary version
      shell: bash
      run: |
        GIT_COMMIT=`git log -1 --format="%H" | cut -c1-7`
        TS_VERSION=`./target/release/tanssi-node --version`
        echo "Checking $TS_VERSION contains $GIT_COMMIT"
        echo "$TS_VERSION" | grep $GIT_COMMIT
    - name: Save runtimes wasm
      shell: bash
      run: |
        mkdir -p runtimes
        cp target/release/wbuild/container-chain-template-simple-runtime/container_chain_template_simple_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/container-chain-template-frontier-runtime/container_chain_template_frontier_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/dancebox-runtime/dancebox_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/flashbox-runtime/flashbox_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/dancelight-runtime/dancelight_runtime.compact.compressed.wasm runtimes/;
        cp target/release/wbuild/starlight-runtime/starlight_runtime.compact.compressed.wasm runtimes/;

    - name: Copy parachain node binaries
      uses: ./.github/workflow-templates/copy-parachain-node-binaries
      with:
        cpu: ""
        profile: "release"

    - name: Copy relaychain node binaries
      uses: ./.github/workflow-templates/copy-relaychain-node-binaries
      with:
        cpu: ""
        profile: "release"
