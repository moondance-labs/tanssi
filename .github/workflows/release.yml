name: CI

on: 
  pull_request:
  push:
    branches:
      - master
      - perm-*

jobs:
  set-tags:
    runs-on: ubuntu-latest
    outputs:
      polkadot_release: ${{ steps.get-polkadot-release-tag.outputs.polkadot_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}
      - name: Get polkadot release tag
        id: get-polkadot-release-tag
        run: |
          branch=$(egrep -o '/polkadot.*#([^\"]*)' Cargo.lock | head -1 | sed 's/.*release-//#')
          echo "polkadot_release=$(echo $branch | sed 's/#.*//' | sed 's/\/polkadot?branch=tanssi-polkadot-//')" >> $GITHUB_OUTPUT
      - name: Display variables
        run: |
          echo polkadot_release: ${{ steps.get-polkadot-release-tag.outputs.polkadot_release }}

  check-copyright:
    runs-on: ubuntu-latest
    needs: ["set-tags"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.set-tags.outputs.git_ref }}
      - name: Find un-copyrighted files
        run: |
          find . \! -name '*.expanded.rs' -name '*.rs' -exec grep  -H -E -o -c Copyright {} \; | grep ':0' || true
          FILECOUNT=$(find . \! -name '*.expanded.rs' -name '*.rs' -exec grep  -H -E -o -c Copyright {} \; | grep -c ':0' || true)
          if [[ $FILECOUNT -eq 0 ]]; then
            true
          else
            false
          fi

  ####### Building and Testing binaries #######
  cargo-clippy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Rust toolchain
        run: rustup show

      - name: Clippy
        run: SKIP_WASM_BUILD=1 env -u RUSTFLAGS cargo clippy --features runtime-benchmarks

  build:
    runs-on: self-hosted
    env:
      RUSTFLAGS: "-C opt-level=3 -D warnings"
      TMP_TARGET: "/tmp/target"
      CARGO_TARGET_DIR: "target"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Rust toolchain
        run: rustup show

      - name: Install nightly
        run: rustup install nightly-2022-11-14
      
      - name: Add wasm32-unknown-unknown to nightly
        run: rustup target add wasm32-unknown-unknown --toolchain nightly-2022-11-14

      - name: Formatter
        run: cargo fmt --all --check

      - name: Build
        run: cargo build --features=fast-runtime --release --all

      - name: Check runtime benchmarks
        run: cargo check --features=runtime-benchmarks --release --all

      - name: Test
        run: cargo test --release --all

      - name: Save runtime wasm
        run: |
          mkdir -p runtimes
          cp $CARGO_TARGET_DIR/release/wbuild/container-chain-template-simple-runtime/container_chain_template_simple_runtime.compact.wasm runtimes/;
          cp $CARGO_TARGET_DIR/release/wbuild/container-chain-template-frontier-runtime/container_chain_template_frontier_runtime.compact.wasm runtimes/;
          cp $CARGO_TARGET_DIR/release/wbuild/dancebox-runtime/dancebox_runtime.compact.compressed.wasm runtimes/;

      - name: Upload runtimes
        uses: actions/upload-artifact@v3.1.2
        with:
          name: runtimes
          path: runtimes

      - name: Save tanssi and template binaries
        run: |
          mkdir -p binaries
          cp $CARGO_TARGET_DIR/release/tanssi-node binaries/tanssi-node;
          cp $CARGO_TARGET_DIR/release/container-chain-template-simple-node binaries/container-chain-template-simple-node;
          cp $CARGO_TARGET_DIR/release/container-chain-template-frontier-node binaries/container-chain-template-frontier-node;

      - name: Upload binary
        uses: actions/upload-artifact@v3.1.2
        with:
          name: binaries
          path: binaries

  typescript-tests:
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha }}
        
      - name: Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
        
      - name: Node  
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: "pnpm"
          cache-dependency-path: test/pnpm-lock.yaml

      - name: "Download binaries"
        uses: actions/download-artifact@v3.0.2
        with:
          name: binaries
          path: target/release
      
      - name: "Install and run upgrade test"
        run: |
          chmod uog+x target/release/tanssi-node
          cd test
          pnpm install --frozen-lockfile
          pnpm moonwall test dev_tanssi

  typescript-tests-frontier:
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha }}
        
      - name: Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
        
      - name: Node  
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: "pnpm"
          cache-dependency-path: test/pnpm-lock.yaml

      - name: "Download binaries"
        uses: actions/download-artifact@v3.0.2
        with:
          name: binaries
          path: target/release
      
      - name: "Install and run upgrade test"
        run: |
          chmod uog+x target/release/container-chain-template-frontier-node
          cd test
          pnpm install --frozen-lockfile
          pnpm moonwall test dev_frontier_template

  zombienet-tests:
    runs-on: ubuntu-latest
    needs: ["set-tags", "build"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha }}

      - name: Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
        
      - name: Node  
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "pnpm"
          cache-dependency-path: test/pnpm-lock.yaml

      - name: "Download binaries"
        uses: actions/download-artifact@v3.0.2
        with:
          name: binaries
          path: test/tmp

      
      - name: Retrieve polkadot binary from docker
        run: |
          POLKADOT_RELEASE=${{ needs.set-tags.outputs.polkadot_release }}
          DOCKER_TAG="parity/polkadot:$POLKADOT_RELEASE"
          echo $DOCKER_TAG
          echo $POLKADOT_RELEASE
          docker rm -f dummy 2> /dev/null | true
          docker create -ti --name dummy $DOCKER_TAG bash
          docker cp dummy:/usr/bin/polkadot test/tmp/polkadot
          docker rm -f dummy
      
      - name: "Run zombie test"
        run: |
          cd test
          pnpm install --frozen-lockfile

          chmod uog+x tmp/tanssi-node
          chmod uog+x tmp/container-chain-template-simple-node
          chmod uog+x tmp/container-chain-template-frontier-node
          chmod uog+x tmp/polkadot

          ## Generate specs
          npm run build-spec-ci

          ## Run tests

          pnpm moonwall test zombie_tanssi_ci

      - name: "Gather zombie logs"
        if: failure()
        run: |
          ls -ltr /tmp
          latest_zombie_dir=$(find /tmp -type d -iname "*zombie*" -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
          logs_dir="logs"
          mkdir -p "$logs_dir"
          find "$latest_zombie_dir" -type f -name "*.log" -exec cp {} "$logs_dir" \;

      - name: "Upload zombie logs"
        if: failure()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: logs
          path: logs
