name: Push Runtime Draft Docker

# The code compile in non-fast mode the runtime and pushes to docker
on:
  push:
    branches:
      - perm-runtime-*
  workflow_dispatch:
    inputs:
      branch:
        description: The branch for which generate binaries from
        required: true
        type: string

jobs:
  ####### Building binaries #######
  setup-scripts:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
      - name: Upload tools
        uses: actions/upload-artifact@v4
        with:
          name: original-tools
          path: tools

  set-tags:
    runs-on: ubuntu-latest
    outputs:
      git_ref: ${{ steps.check-git-ref.outputs.git_ref }}
      git_branch: ${{ steps.check-git-ref.outputs.git_branch }}

    steps:
      - name: Check git ref
        id: check-git-ref
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "git_ref=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
            echo "git_branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "git_ref=${{ github.event.inputs.to }}" >> $GITHUB_OUTPUT
            echo "git_branch=$(echo ${GITHUB_REF##*/})" >> $GITHUB_OUTPUT
            echo ${GITHUB_REF##*/}
          fi
  build-binary:
    needs: ["setup-scripts", "set-tags"]
    runs-on: self-hosted
    strategy:
      matrix:
        cpu: ["", "skylake", "znver3"]
    env:
      RUSTFLAGS: "-C target-cpu=${{ matrix.cpu }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.check-git-ref.outputs.git_ref }}
      - name: Setup Rust toolchain
        run: rustup show
      - name: Build Node tanssi-relay
        if:  contains(needs.set-tags.outputs.git_branch, 'starlight')
        run: cargo build -p tanssi-relay --profile=production
      - name: Build Node parachains
        if:  contains(needs.set-tags.outputs.git_branch, 'para')
        run: cargo build -p tanssi-node -p container-chain-frontier-node -p container-chain-simple-node --profile=production
      - name: Save binary (parachain)
        if: ${{ matrix.cpu == '' && contains(needs.set-tags.outputs.git_branch, 'para') }}
        uses: ./.github/workflow-templates/copy-parachain-node-binaries
        with:
          cpu: ${{ matrix.cpu }}

      - name: Save binary (relaychain)
        if: ${{ matrix.cpu == '' && !contains(needs.set-tags.outputs.git_branch, 'para') }}
        uses: ./.github/workflow-templates/copy-relaychain-node-binaries
        with:
          cpu: ${{ matrix.cpu }}
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.cpu }}
          path: binaries

  docker_matrix_prep:
    runs-on: ubuntu-latest
    needs: ["set-tags"]
    outputs:
      matrix_tests: ${{ steps.prepare.outputs.matrix_tests }}
    steps:
      - uses: actions/checkout@v5

    # Build input dependent matrix
      - name: create matrix
        id: prepare
        run: |
          tanssi_para='{"image": "tanssi"}'
          tanssi_solo='{"image": "starlight"}'
          container_chain_evm='{"image": "container-chain-evm-template"}'
          container_chain_simple='{"image": "container-chain-simple-template"}'
          if [[ "${{ needs.set-tags.outputs.git_branch }}" == *"para"* ]]; then
            echo "matrix_tests=[$tanssi_para, $container_chain_evm, $container_chain_simple]" >> $GITHUB_OUTPUT
          else
            echo "matrix_tests=[$tanssi_solo]" >> $GITHUB_OUTPUT
          fi
          
  docker-tanssi:
    runs-on: ubuntu-latest
    needs: ["build-binary", "docker_matrix_prep"]
    
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.docker_matrix_prep.outputs.matrix_tests) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
          path: build
      - name: Prepare
        id: prep
        run: |
          SHA8=$(git log -1 --format='%H' | cut -c1-8)
          DOCKER_IMAGE=moondancelabs/${{matrix.image.image}}
          TAGS="${DOCKER_IMAGE}:sha-${SHA8}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to DockerHub
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{matrix.image.image}}.Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}