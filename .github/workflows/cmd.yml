name: PR comment bot (/cmd)

on:
  issue_comment:
    types: [ created ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  is-org-member:
    if: startsWith(github.event.comment.body, '/cmd')
    runs-on: ubuntu-latest
    steps:
      - name: Check Permissions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: moondance-labs
          REPO: tanssi
          COLLABORATOR: ${{ github.actor }}
        run: |
          permissions=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$ORG/$REPO/collaborators/$COLLABORATOR/permission")
          
          permission_level=$(echo "$permissions" | jq -r '.permission')
          
          if [[ "$permission_level" == "write" || "$permission_level" == "admin" ]]; then
            echo "‚úÖ User $COLLABORATOR has permission: "$permission_level". Proceeding..."
          else
            echo "‚ùå User $COLLABORATOR doesn't have enough permission: "$permission_level". Failing..." && exit 1
          fi
  acknowledge:
    if: startsWith(github.event.comment.body, '/cmd')
    needs: ["is-org-member"]
    runs-on: ubuntu-latest
    steps:
      - name: Add reaction to triggered comment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.reactions.createForIssueComment({
              comment_id: ${{ github.event.comment.id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: 'eyes'
            })

  update_typescript_api_augment:
    needs: ["is-org-member"]
    runs-on: self-hosted
    env:
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "0"
      SCCACHE_CACHE_SIZE: "100GB"
      SCCACHE_GHA_ENABLED: "true"
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: ${{ github.event.comment.body == '/cmd generate-ts-api' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: refs/pull/${{ github.event.issue.number }}/head

      - name: Install GitHub CLI
        uses: ./.github/workflow-templates/gh-cli

      - name: Cargo build
        uses: ./.github/workflow-templates/cargo-build
        with:
          features: "fast-runtime,metadata-hash"

      - name: Pnpm
        uses: pnpm/action-setup@v4.2.0
        with:
          version: 9

      - name: "Setup Node"
        uses: actions/setup-node@v5
        with:
          node-version: 22.x
          cache: "pnpm"

      - name: Generate Typescript API Interfaces
        uses: ./.github/workflow-templates/typescript-create-api-interfaces

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          echo "Git status:"
          git status
          cd typescript-api
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .
            echo "About to commit changes. Status:"
            git status
            
            PR_NUMBER=$(jq --raw-output .issue.number "$GITHUB_EVENT_PATH")
            TARGET_BRANCH=$(~/bin/bin/gh pr view "$PR_NUMBER" --json headRefName -q .headRefName)
            
            echo "PR Number: $PR_NUMBER"
            echo "Target Branch: $TARGET_BRANCH"
  
            git fetch origin "$TARGET_BRANCH"
            git checkout "$TARGET_BRANCH"
  
            git commit -m "Auto-generated TypeScript interfaces"
            git rebase origin/"$TARGET_BRANCH"
            git push origin "$TARGET_BRANCH"
          fi

      - name: Add confused reaction on failure
        uses: actions/github-script@v8
        if: ${{ failure() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.reactions.createForIssueComment({
              comment_id: ${{ github.event.comment.id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: 'confused'
            })

      - name: Add üëç reaction on success
        uses: actions/github-script@v8
        if: ${{ !failure() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.reactions.createForIssueComment({
              comment_id: ${{ github.event.comment.id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '+1'
            })