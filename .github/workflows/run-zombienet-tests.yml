name: Run all zombienet tests on schedule

on:
  schedule:
    - cron: "0 0 * * 6"  # Runs every Saturday at 12 AM UTC
  workflow_dispatch:
    inputs:
      sha:
        description: "Full commit SHA to use (default: master)"
        required: false
        type: string
      test_name:
        description: "Name of the test suite to run (regex supported, overrides bundle)"
        required: false
        type: string
      test_bundle:
        description: "Test bundle to run (ignored if test_name is set)"
        required: false
        type: choice
        default: "weekly_bundle"
        options:
          - weekly_bundle
          - manual_bundle
      foundation_type:
        description: Foundation type to filter tests
        required: false
        type: choice
        default: "zombie"
        options:
          - "*"
          - zombie
          - dev
          - chopsticks
          - read_only

jobs:
  get-tests:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set_tests.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Determine Tests
        id: get_tests
        run: |
          foundation_type="${{ github.event.inputs.foundation_type || 'zombie' }}"
          test_name="${{ github.event.inputs.test_name || '' }}"
          test_bundle="${{ github.event.inputs.test_bundle || 'weekly_bundle' }}"

          echo "Input test_name: $test_name"
          echo "Input bundle: $test_bundle"

          if [ -z "$test_name" ]; then
            if [ "$test_bundle" == "weekly_bundle" ]; then
              tests='["zombie_tanssi_warp_sync", "zombie_tanssi_parathreads", "zombie_tanssi_metrics"]'
            elif [ "$test_bundle" == "manual_bundle" ]; then
              tests='["zombie_tanssi_relay_finalization_recovery", "zombie_simple_template_offchain", "zombie_tanssi_keep_db", "zombie_tanssi_one_node", "zombie_tanssi_relay_starlight", "zombie_tanssi_relay_unneeded_para"]'
            else
              echo "Unknown bundle: $test_bundle"
              exit 1
            fi
          else
            tests=$(jq -r --arg type "$foundation_type" --arg regex "$test_name" '
              .environments
              | map(select((.foundation.type == $type or $type == "*") and (.name | test($regex))))
              | map(.name)
            ' test/moonwall.config.json | jq -c '.')
          fi

          echo "Selected tests: $tests"

          if [ -z "$tests" ] || [ "$tests" == "[]" ]; then
            echo "No tests found. Exiting."
            exit 1
          fi

          echo "tests=$tests" >> $GITHUB_ENV

      - name: Set tests output
        id: set_tests
        run: |
          include_tests=$(echo '${{ env.tests }}' | jq -c '{include: . | map({test_name: .})}')
          echo "tests=$include_tests" >> $GITHUB_OUTPUT

  build:
    needs: get-tests
    runs-on: self-hosted
    env:
      TMP_TARGET: "/tmp/target"
      CARGO_TARGET_DIR: "target"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.sha || 'master' }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Setup Variables
        shell: bash
        run: |
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=100GB" >> $GITHUB_ENV
          # Set RUSTFLAGS if not already set
          if [ -z "$RUSTFLAGS" ]; then
            echo "RUSTFLAGS=-C opt-level=3 -D warnings -C linker=clang -C link-arg=-fuse-ld=$(pwd)/mold/bin/mold" >> $GITHUB_ENV
          fi
      - name: Setup Mold Linker
        shell: bash
        run: |
          mkdir -p mold
          curl -L --retry 10 --silent --show-error https://github.com/rui314/mold/releases/download/v2.30.0/mold-2.30.0-$(uname -m)-linux.tar.gz | tar -C $(realpath mold) --strip-components=1 -xzf -
      - name: Setup Rust toolchain
        run: rustup show
      - name: Build
        run: cargo build --features=fast-runtime --release --all
      - name: Package all runtime Wasm into tarball
        run: |
          mkdir -p runtimes
          cd $CARGO_TARGET_DIR
          # gather all .wasm paths (relative to $CARGO_TARGET_DIR)â€¦
          find . -type f -name '*.wasm' > wasm_files.txt
          # â€¦then tar them up into a gzipped archive in the workspace
          tar czf $GITHUB_WORKSPACE/runtimes/runtimes.tar.gz -T wasm_files.txt
      - name: Upload runtime archive
        uses: actions/upload-artifact@v4
        with:
          name: wasm-runtimes
          path: runtimes/runtimes.tar.gz

      - name: Copy parachain node binaries
        uses: ./.github/workflow-templates/copy-parachain-node-binaries
        with:
          cpu: ""
          profile: "release"

      - name: Copy relaychain node binaries
        uses: ./.github/workflow-templates/copy-relaychain-node-binaries
        with:
          cpu: ""
          profile: "release"

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: binaries
  run-tests:
    runs-on: self-hosted
    needs: [ "get-tests", "build" ]
    env:
      CARGO_TARGET_DIR: "target"
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-tests.outputs.matrix) }}
    steps:
      - name: "Download binaries"
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: target/release

      - name: Setup GH CLI
        uses: cli/cli-action@v2
        with:
          version: latest

      - name: Make binaries executable
        uses: ./.github/workflow-templates/make-binaries-executable

      - name: Download runtime archive
        uses: actions/download-artifact@v4
        with:
          name: wasm-runtimes
          path: runtimes
      - name: Extract runtimes back into target/
        run: |
          # ensure the target dir exists
          mkdir -p $CARGO_TARGET_DIR
          # unpack, preserving all subâ€‘dirs exactly as they were
          tar xzf runtimes/runtimes.tar.gz -C $CARGO_TARGET_DIR
      - name: Run Zombienet Test ${{ matrix.test_name }}
        uses: ./.github/workflow-templates/zombienet-tests
        with:
          test_name: ${{ matrix.test_name }}

      - name: Create issue with gh CLI
        if: failure()
        run: |
          gh issue create \
            --title "ðŸš¨ Zombienet Test Failure in ${{ github.workflow }}" \
            --body "Tests ${{ matrix.test_name }} failed in [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).\n\n@moondance-labs/coredev please investigate." \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}